{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\egemen.ertas\\\\Desktop\\\\E-Commerce\\\\ecommerce-frontend\\\\src\\\\components\\\\ProductList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport ProductCard from './ProductCard'; // Ürün kartı bileşeni\nimport SearchAndFilter from './SearchAndFilter'; // Arama ve filtreleme bileşeni\nimport './ProductList.css'; // CSS dosyasını dahil ediyoruz\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProductList = () => {\n  _s();\n  // 1. state değişkenleri\n  const [products, setProducts] = useState([]); // Tüm ürünleri tutar\n  const [filteredProducts, setFilteredProducts] = useState([]); // Filtrelenmiş ürünleri tutar\n  const [loading, setLoading] = useState(true); // Yükleniyor durumu\n  const [error, setError] = useState(null); // Hata mesajı\n\n  // 2. API'den veri alma\n  useEffect(() => {\n    // Backend API'sine GET isteği gönderiyoruz\n    axios.get('https://localhost:5243/api/product').then(response => {\n      console.log(\"Fetched products:\", response.data); // API'den gelen veriyi console'a yazdırıyoruz\n      setProducts(response.data); // Gelen ürünleri 'products' state'ine kaydediyoruz\n      setFilteredProducts(response.data); // İlk başta tüm ürünleri filtrelenmiş olarak göstereceğiz\n      setLoading(false); // Yükleme tamamlandı\n    }).catch(err => {\n      setError('Error fetching products'); // Hata oluşursa bu mesajı gösteriyoruz\n      setLoading(false); // Yükleme tamamlandı\n      console.error(\"Error fetching products:\", err); // Hata mesajını console'a yazdırıyoruz\n    });\n  }, []); // useEffect sadece bir kere çalışır, yani komponent ilk defa render edildiğinde çalışır\n\n  // 3. Arama fonksiyonu\n  const handleSearch = term => {\n    // Arama terimi ile ürünleri filtreliyoruz\n    const filtered = products.filter(product => product.name.toLowerCase().includes(term.toLowerCase()) ||\n    // Ürün adında arama\n    product.description && product.description.toLowerCase().includes(term.toLowerCase()) // Açıklamada arama\n    );\n    setFilteredProducts(filtered); // Filtrelenmiş ürünleri 'filteredProducts' state'ine kaydediyoruz\n  };\n\n  // 4. Kategoriye göre filtreleme fonksiyonu\n  const handleFilter = category => {\n    // Eğer kategori seçildiyse, sadece o kategoriye ait ürünleri filtreliyoruz\n    const filtered = category ? products.filter(product => product.category.toLowerCase() === category.toLowerCase()) // Kategoriye göre filtreleme\n    : products; // Eğer kategori seçilmediyse, tüm ürünleri gösteriyoruz\n    setFilteredProducts(filtered); // Filtrelenmiş ürünleri 'filteredProducts' state'ine kaydediyoruz\n  };\n\n  // 5. Sepete ekleme işlemi\n  const handleAddToCart = productId => {\n    console.log(`Product ${productId} added to cart`); // Sepete ekleme işlemi burada yapılacak\n  };\n\n  // 6. Yükleniyor durumu ve hata mesajları\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading products...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 12\n    }, this); // Ürünler yükleniyorsa bu mesajı gösteriyoruz\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 12\n    }, this); // Hata mesajı varsa bunu gösteriyoruz\n  }\n\n  // 7. Görüntülenecek JSX\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(SearchAndFilter, {\n      onSearch: handleSearch,\n      onFilter: handleFilter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"product-list\",\n      children: filteredProducts.length > 0 ? filteredProducts.map(product => /*#__PURE__*/_jsxDEV(ProductCard, {\n        product: product,\n        onAdd: handleAddToCart\n      }, product.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this)\n      // 'ProductCard' her bir ürünü tek tek listeleyecek, 'onAdd' fonksiyonu ile sepete eklenmesini sağlar\n      ) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No products found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this) // Eğer filtrelenmiş ürün yoksa, \"No products found\" mesajı gösterilir\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(ProductList, \"sEOpccBrvFeIb3Pz36a/++0bd9A=\");\n_c = ProductList;\nexport default ProductList;\nvar _c;\n$RefreshReg$(_c, \"ProductList\");","map":{"version":3,"names":["React","useState","useEffect","axios","ProductCard","SearchAndFilter","jsxDEV","_jsxDEV","ProductList","_s","products","setProducts","filteredProducts","setFilteredProducts","loading","setLoading","error","setError","get","then","response","console","log","data","catch","err","handleSearch","term","filtered","filter","product","name","toLowerCase","includes","description","handleFilter","category","handleAddToCart","productId","children","fileName","_jsxFileName","lineNumber","columnNumber","onSearch","onFilter","className","length","map","onAdd","id","_c","$RefreshReg$"],"sources":["C:/Users/egemen.ertas/Desktop/E-Commerce/ecommerce-frontend/src/components/ProductList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport ProductCard from './ProductCard';  // Ürün kartı bileşeni\r\nimport SearchAndFilter from './SearchAndFilter';  // Arama ve filtreleme bileşeni\r\nimport './ProductList.css';  // CSS dosyasını dahil ediyoruz\r\n\r\nconst ProductList = () => {\r\n  // 1. state değişkenleri\r\n  const [products, setProducts] = useState([]); // Tüm ürünleri tutar\r\n  const [filteredProducts, setFilteredProducts] = useState([]); // Filtrelenmiş ürünleri tutar\r\n  const [loading, setLoading] = useState(true); // Yükleniyor durumu\r\n  const [error, setError] = useState(null); // Hata mesajı\r\n\r\n  // 2. API'den veri alma\r\n  useEffect(() => {\r\n    // Backend API'sine GET isteği gönderiyoruz\r\n    axios.get('https://localhost:5243/api/product')\r\n      .then(response => {\r\n        console.log(\"Fetched products:\", response.data);  // API'den gelen veriyi console'a yazdırıyoruz\r\n        setProducts(response.data); // Gelen ürünleri 'products' state'ine kaydediyoruz\r\n        setFilteredProducts(response.data);  // İlk başta tüm ürünleri filtrelenmiş olarak göstereceğiz\r\n        setLoading(false); // Yükleme tamamlandı\r\n      })\r\n      .catch(err => {\r\n        setError('Error fetching products'); // Hata oluşursa bu mesajı gösteriyoruz\r\n        setLoading(false); // Yükleme tamamlandı\r\n        console.error(\"Error fetching products:\", err); // Hata mesajını console'a yazdırıyoruz\r\n      });\r\n  }, []); // useEffect sadece bir kere çalışır, yani komponent ilk defa render edildiğinde çalışır\r\n\r\n  // 3. Arama fonksiyonu\r\n  const handleSearch = (term) => {\r\n    // Arama terimi ile ürünleri filtreliyoruz\r\n    const filtered = products.filter(product =>\r\n      product.name.toLowerCase().includes(term.toLowerCase()) || // Ürün adında arama\r\n      (product.description && product.description.toLowerCase().includes(term.toLowerCase())) // Açıklamada arama\r\n    );\r\n    setFilteredProducts(filtered); // Filtrelenmiş ürünleri 'filteredProducts' state'ine kaydediyoruz\r\n  };\r\n\r\n  // 4. Kategoriye göre filtreleme fonksiyonu\r\n  const handleFilter = (category) => {\r\n    // Eğer kategori seçildiyse, sadece o kategoriye ait ürünleri filtreliyoruz\r\n    const filtered = category\r\n      ? products.filter(product => product.category.toLowerCase() === category.toLowerCase())  // Kategoriye göre filtreleme\r\n      : products; // Eğer kategori seçilmediyse, tüm ürünleri gösteriyoruz\r\n    setFilteredProducts(filtered); // Filtrelenmiş ürünleri 'filteredProducts' state'ine kaydediyoruz\r\n  };\r\n\r\n  // 5. Sepete ekleme işlemi\r\n  const handleAddToCart = (productId) => {\r\n    console.log(`Product ${productId} added to cart`); // Sepete ekleme işlemi burada yapılacak\r\n  };\r\n\r\n  // 6. Yükleniyor durumu ve hata mesajları\r\n  if (loading) {\r\n    return <p>Loading products...</p>;  // Ürünler yükleniyorsa bu mesajı gösteriyoruz\r\n  }\r\n\r\n  if (error) {\r\n    return <p>{error}</p>; // Hata mesajı varsa bunu gösteriyoruz\r\n  }\r\n\r\n  // 7. Görüntülenecek JSX\r\n  return (\r\n    <div>\r\n      {/* 8. Arama ve Filtreleme bileşenini burada kullanıyoruz */}\r\n      <SearchAndFilter onSearch={handleSearch} onFilter={handleFilter} />\r\n\r\n      {/* 9. Filtrelenmiş ürünleri listelemek */}\r\n      <div className=\"product-list\">\r\n        {filteredProducts.length > 0 ? (\r\n          filteredProducts.map(product => (\r\n            <ProductCard key={product.id} product={product} onAdd={handleAddToCart} />\r\n            // 'ProductCard' her bir ürünü tek tek listeleyecek, 'onAdd' fonksiyonu ile sepete eklenmesini sağlar\r\n          ))\r\n        ) : (\r\n          <p>No products found</p> // Eğer filtrelenmiş ürün yoksa, \"No products found\" mesajı gösterilir\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProductList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}